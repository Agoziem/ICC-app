import { z } from "zod";
import { UserminiSchema } from "./users";

export const tagSchema = z.object({
  id: z.number().optional().nullable(), // Assuming id is automatically generated by Django
  tag: z.string().max(100).optional().nullable(),
});

export const tagArraySchema = z.array(tagSchema);

export const categorySchema = z.object({
  id: z.number().optional().nullable(), // Assuming id is automatically generated by Django
  category: z
    .string()
    .min(1, { message: "category name should be specified" })
    .max(100),
  description: z.string().optional().nullable(), // TextField for description
});

export const categoryArraySchema = z.array(categorySchema);

// Max size 5MB, allowed types: jpg, jpeg, png
const MAX_FILE_SIZE = 5 * 1024 * 1024;
const ALLOWED_FILE_TYPES = ["image/jpeg", "image/png", "image/jpg"];

export const ArticleSchema = z.object({
  id: z.number().optional().nullable(),
  organization: z.number().optional().nullable(),
  author: UserminiSchema,
  img: z
    .union([
      z
        .instanceof(File)
        .refine((file) => ALLOWED_FILE_TYPES.includes(file.type), {
          message: "Only .jpg, .jpeg, and .png files are allowed",
        })
        .refine((file) => file.size <= MAX_FILE_SIZE, {
          message: "File size must not exceed 5 MB",
        }),
      z.string(),
    ])
    .optional()
    .nullable(),
  img_url: z.string().optional().nullable(),
  img_name: z.string().optional().nullable(),
  title: z
    .string()
    .min(1, {
      message: "title is required",
    })
    .max(100),
  subtitle: z
    .string()
    .min(1, {
      message: "sub-title is required",
    })
    .max(100),
  body: z.string({ message: "body of the Article is required" }).min(8, {
    message: "min of 8 characters is required",
  }), // RichTextField -> typically a string in the form of HTML or markdown
  tags: z.array(tagSchema).optional(),
  slug: z.string().max(100).optional().nullable(),
  category: categorySchema.optional().nullable(),
  readTime: z
    .number()
    .min(1, {
      message: "read time cannot be less than 1",
    })
    .default(0),
  views: z.number().min(0).default(0),
  likes: z.array(z.number()).optional(), 
  date: z.coerce.date().default(new Date()),
  updated_at: z.coerce.date().default(new Date()),
});

export const ArticleResponseSchema = z.object({
  count: z.number(),
  next: z.string().nullable(), // next can be null
  previous: z.string().nullable(), // previous can be null
  results: z.array(ArticleSchema),
});

export const commentSchema = z.object({
  id: z.number().optional(), // Assuming id is automatically generated by Django
  user: UserminiSchema, // ForeignKey to user, assuming a user ID
  blog: z.number(), // ForeignKey to blog, assuming a blog ID
  comment: z.string(),
  date: z.coerce.date(), // auto_now_add so it won't be manually added
  updated_at: z.coerce.date().optional(), // auto_now so optional
});

export const commentArraySchema = z.array(commentSchema);

export const commentResponseSchema = z.object({
  count: z.number(),
  next: z.string().nullable(), // next can be null
  previous: z.string().nullable(), // previous can be null
  results: z.array(commentSchema),
});
