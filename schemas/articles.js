import { z } from "zod";
import { UserminiSchema } from "./users";



export const tagSchema = z.object({
  id: z.number().optional(), // Assuming id is automatically generated by Django
  tag: z.string().max(100).optional().nullable(),
});

export const tagArraySchema = z.array(tagSchema);

export const categorySchema = z.object({
  id: z.number().optional(), // Assuming id is automatically generated by Django
  category: z.string().max(100).optional().nullable(),
});

export const categoryArraySchema = z.array(categorySchema);

export const ArticleSchema = z.object({
  id: z.number().optional(), // Assuming id is automatically generated by Django
  organization: z.number().optional().nullable(), // Assumes an organization ID (ForeignKey)
  author: UserminiSchema,
  img: z.string().optional().nullable(), // Assumes file path for image uploads
  img_url: z.string().url().optional().nullable(), // Assumes file URL for image uploads
  img_name: z.string().optional().nullable(), // Assumes file URL for image uploads
  title: z.string().max(100),
  subtitle: z.string().max(100).optional().nullable(),
  body: z.string().optional().nullable(), // RichTextField -> typically a string in the form of HTML or markdown
  date: z.coerce.date(), // auto_now_add in Django so it won't be manually added
  tags: z.array(tagSchema).optional(), // ManyToManyField for tags, assuming tag IDs
  slug: z.string().max(100).optional().nullable(),
  category: categorySchema.optional().nullable(), // Assumes category ID (ForeignKey)
  readTime: z.number().min(0).default(0),
  views: z.number().min(0).default(0),
  likes: z.array(z.number()).optional(), // ManyToManyField for likes, assuming user IDs
  updated_at: z.coerce.date(), // auto_now in Django, so optional here
});

export const ArticleResponseSchema = z.object({
  count: z.number(),
  next: z.string().nullable(), // next can be null
  previous: z.string().nullable(), // previous can be null
  results: z.array(ArticleSchema),
});

export const commentSchema = z.object({
  id: z.number().optional(), // Assuming id is automatically generated by Django
  user: UserminiSchema, // ForeignKey to user, assuming a user ID
  blog: z.number(), // ForeignKey to blog, assuming a blog ID
  comment: z.string(),
  date: z.coerce.date(), // auto_now_add so it won't be manually added
  updated_at: z.date().optional(), // auto_now so optional
});

export const commentArraySchema = z.array(commentSchema);

export const commentResponseSchema = z.object({
  count: z.number(),
  next: z.string().nullable(), // next can be null
  previous: z.string().nullable(), // previous can be null
  results: z.array(commentSchema),
});

