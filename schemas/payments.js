import { z } from "zod";
import { productSchema, serviceSchema, videoSchema } from "./items";

/**
 * Payment Status tuple
 * @type {['Pending', 'Completed', 'Failed']}
 */
export const paymentStatusEnum = ["Pending", "Completed", "Failed"];

export const orderSchema = z.object({
  id: z.number().optional(), // Assuming id is automatically generated by Django
  organization: z
    .object({
      id: z.number().optional().nullable(),
      name: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
  customer: z
    .object({
      id: z.number().optional().nullable(),
      name: z.string().optional().nullable(),
      email: z.string().email().optional().nullable(),
    })
    .optional()
    .nullable(),
  services: z.array(serviceSchema).optional(), // ManyToManyField, array of service IDs
  products: z.array(productSchema).optional(), // ManyToManyField, array of product IDs
  videos: z.array(videoSchema).optional(), // ManyToManyField, array of video IDs
  amount: z.string().refine((val) => !isNaN(parseFloat(val)), {
    message: "Amount must be a valid number",
  }), // DecimalField, should be a valid number (string for handling inputs)
  status: z.enum(paymentStatusEnum).default("Pending"), // Choices for payment status
  reference: z.string().max(100).optional().nullable(),
  service_delivered: z.boolean().default(false),
  created_at: z.coerce.date().optional(), // auto_now_add, handled by the backend
  last_updated_date: z.coerce.date().optional(), // auto_now, handled by the backend
});

export const ordersSchema = z.array(orderSchema)

export const ordersResponseSchema = z.object({
  count: z.number(),
  next: z.string().nullable(), // next can be null
  previous: z.string().nullable(), // previous can be null
  results: z.array(ordersSchema),
});


export const CustomerSchema = z.object({
  customer__id: z.number().int(),              // Customer ID as an integer
  customer__username: z.string(),              // Customer username as a string
  customer__count: z.number().int(),           // Total count of orders by the customer
  amount__sum: z.number().nonnegative(),       // Sum of the amounts (non-negative)
  amount__avg: z.number().nonnegative(),       // Average of the amounts (non-negative)
});

export const ordersReportSchema = z.object({
  totalorders: z.number().int(),               // Total number of orders
  totalcustomers: z.number().int(),            // Total number of customers
  customers: z.array(CustomerSchema),          // Array of customers
});
