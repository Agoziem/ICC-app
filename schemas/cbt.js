import { z } from "zod";

export const yearSchema = z.object({
  id: z.number().optional(), // Auto-generated by Django
  year: z.number().min(1900), // IntegerField for year, default is 2021
});

export const yearArraySchema = z.array(yearSchema)

export const testTypeSchema = z.object({
  id: z.number().optional(), // Auto-generated by Django
  testtype: z.string().min(1).max(255), // CharField for test type, required
});

export const testTypeArraySchema = z.array(testTypeSchema)

export const answerSchema = z.object({
  id: z.number().optional(), // Auto-generated by Django
  answertext: z.string().min(1).max(255), // CharField for answer text
});

export const answerArraySchema = z.array(answerSchema)

export const questionSchema = z.object({
  id: z.number().optional(), // Auto-generated by Django
  questiontext: z.string(), // RichTextField for question text
  questionMark: z.number().optional(), // IntegerField for question mark, default is 0
  required: z.boolean().optional(), // BooleanField for required question
  answers: z.array(z.number()), // ManyToManyField, list of Answer IDs
  correctAnswer: z.number().nullable(), // ForeignKey to Answer model, nullable
  correctAnswerdescription: z.string().optional().nullable(), // RichTextField for description
});

export const questionArraySchema = z.array(questionSchema)

export const subjectSchema = z.object({
  id: z.number().optional(), // Auto-generated by Django
  subjectduration: z.number().optional(), // IntegerField for subject duration
  subjectname: z.string().min(1).max(255), // CharField for subject name
  questions: z.array(z.number()), // ManyToManyField, list of Question IDs
});

export const subjectArraySchema = z.array(subjectSchema)

export const testSchema = z.object({
  id: z.number().optional(), // Auto-generated by Django
  testorganization: z.number().nullable(), // ForeignKey to Organization model, nullable
  texttype: z.number().nullable(), // ForeignKey to TestType model, nullable
  testSubject: z.array(z.number()), // ManyToManyField, list of Subject IDs
  testYear: z.number().nullable(), // ForeignKey to Year model, nullable
});

export const testArraySchema = z.array(testSchema)


export const testResultSchema = z.object({
  id: z.number().optional(), // Auto-generated by Django
  organization: z.number().nullable(), // ForeignKey to Organization model, nullable
  tests: z.array(z.number()), // ManyToManyField, list of Test IDs
  user: z.number().nullable(), // ForeignKey to User model, nullable
  mark: z.number().optional(), // IntegerField for the result mark
  date: z.date().optional(), // DateTimeField for result date
});

export const testResultArraySchema = z.array(testResultSchema)
