import { z } from 'zod';

export const UserminiSchema = z.object({
  id: z.number(),
  username: z.string(),
  img: z.string().url().optional().nullable(), // Assuming it's a URL
});


// Schema for the CustomUser model
export const UserSchema = z.object({
  id: z.number().optional(),                    // Auto-generated by Django
  username: z.string().max(150).optional(),      // Username field from AbstractUser
  first_name: z.string().max(30).optional(),     // First name from AbstractUser
  last_name: z.string().max(30).optional(),      // Last name from AbstractUser
  email: z.string().email().optional(),          // Email field from AbstractUser
  avatar: z.string().nullable().optional(),      // ImageField for avatar (URL or null)
  isOauth: z.boolean().default(false),           // BooleanField for OAuth status
  Oauthprovider: z.string().max(100).default('email').nullable(), // Provider name
  emailIsVerified: z.boolean().default(false),   // BooleanField for email verification
  twofactorIsEnabled: z.boolean().default(false), // BooleanField for two-factor auth
  verificationToken: z.string().max(100).nullable(), // Unique token field
  expiryTime: z.date().nullable(),               // DateTimeField for token expiry
  address: z.string().max(100).nullable(),       // CharField for address
  Sex: z.string().max(10).nullable(),            // CharField for gender/sex
  phone: z.string().max(15).nullable(),          // CharField for phone number
  is_active: z.boolean().default(true),          // BooleanField from AbstractUser
  is_staff: z.boolean().default(false),          // BooleanField from AbstractUser
  is_superuser: z.boolean().default(false),      // BooleanField from AbstractUser
  date_joined: z.date().optional(),              // Date when the user joined
  last_login: z.date().nullable(),               // Last login timestamp

  groups: z.array(z.number()).optional(),        // ManyToManyField (Group IDs)
  user_permissions: z.array(z.number()).optional(), // ManyToManyField (Permission IDs)
});

export const UsersResponseSchema = z.object({
  count: z.number(),
  next: z.string().nullable(), // next can be null
  previous: z.string().nullable(), // previous can be null
  results: z.array(UserSchema),
});